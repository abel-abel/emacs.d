* Section 1 [2017-10-29 Sun 11:38]
** Note
the `C` in `C-x` means 'Control key'
the `M` in `M-x` means 'Alt key'

`C-g` exit or cancels the current command.

eg. `C-x C-s` save current buffer/file. If I entered `C-x` and changed
my mind, I can enter `C-g` to exit this command.

** Step

1. Section One: Move cursor around
   1) move one line up: C-p
   2) move one line down: C-n
   3) move one character forward: C-f
   4) move one character backward: C-b
   5) move one word forward: M-f
   6) move one word backward: M-b
   7) move to the beginning of current line: C-a
   8) move to the end of current line: C-e
2. Section Two: save(as)/open/find a file/buffer
   1) write current buffer to a file: C-x C-w then enter the file path
      and name. I write this buffer to ~/Desktop/Emacs-tutorial-1.org
   2) save file: C-x C-s
   3) kill buffer: C-x k
   4) find/open file: C-x C-f

Bye! See you next time!

* Section 2 [2017-10-29 Sun 23:20]
** Step
In this section, I will introduce how to add ELPA repository and install an
Emacs theme.

1. configre ELPA repository
   1) create an Emacs initialization file: ~/.emacs.d/init.el
   2) go to: https://elpa.emacs-china.org/ and copy the code snippet
      to init.el
   3) Eval the `init.el` buffer
2. Install an Emacs theme package
   1) `M-x list-packages` to list all of the Emacs packages of
      archives online
   2) choose a theme package and type `i` to select it
   3) type `x` to start installing package
   4) load the theme in your `init.el`
   5) `M-x eval-buffer` to reload `init.el` file

Now, Emacs looks better. :P

Bye! See you next time! 
* Section 3 [2017-10-30 Mon 22:06]
** Step
In this video, I'll introduce how to disable toolbar and menubar.

we use two functions here: tool-bar-mode and menu-bar-mode.

How to exit emacs? The shortcut is: `C-x C-c`

How to create another window?

1. create another window horizonally: `C-x 2`
2. create another window vertically: `C-x 3`
3. switch to another window: `C-x o` (`o` means `other`)
4. close other windows except the current one: `C-x 1`

How to navigate to the beginning of the current buffer? `M-<`

How to navigate to the end of the current buffer? `M->`

Bye! See you next time!
* Section 4 [2017-10-31 Tue 21:38]
In this section, I'll introduce how to install some packages I love.

1. use-package: install and manage other packages
2. magit: use git in Emacs
3. lispy: write lisp code

Now I will use magit to create a repository and make a commit. Great!

using lispy, we can navigate in lisp code smoothly. :)

Bye! See you next time!
* Section 5 [2017-11-01 Wed 22:15]
Today, I'll introduce how to set font in Emacs and use magit plugin.

1. set font using `default-frame-alist` variable
2. using magit
   1) add a remote repository for this repository
   2) we use `git@abel-github.com:abel-abel/emacs.d.git' as your
      remote repository
   3) pull commits from origin and push local commits to remote repo
      - we have unstaged changes. we stash them now.
   4) we pull with rebase enabled and there's conflict
   5) let's solve conflict now
      - now changes in stash@{1} is merged to your stage
      - we drop it now
      - now we apply stash@{0}
      - no conflict
      - commit the changes now!
      - drop stash@{0}
   6) push our changes to remote repository
   7) I want to put the changes to the latest commit using rebase

Bye! See you next time! :)
* Section 6 [2017-11-02 Thu 21:31]
In this section, I will introduce how to use magit in an organized
way.

1. create an empty repository
2. create a file in this repo
3. stage untracked files
4. show staged changes
5. show unstaged changes
6. commit staged changes
7. show log history
8. stage and unstage changes
9. move changes to a stash
10. pop a stash: if we pop a stash, the stash is poped from the
    Stashed
11. apply a stash: if we apply a stash, the stash is kept in Stashes
    for future use
12. create and checkout a new branch
13. make a new commit in new branch
14. checkout to another branch
15. merge sub branch to merge branch

Bye! See you next time!
* Section 7 [2017-11-03 Fri 23:26]
Today, I'll introduce how to look up info file in Emacs.

1. Read Emacs manual: `C-h i m Emacs`
2. Read Emacs Lisp Intro
   - Sorry, I didn't install that info file. :(
3. lookup a variable: `C-h v'
4. lookup a function: `C-h f'

Now, I'll show how to navigate in the info file.

I'll try to show it slower.. :)

Bye! See you next time!
* Section 8 [2017-11-04 Sat 10:58]
In this section, I'll introduce how to install and use swiper plugin.

using swiper, ivy and counsel. We can use completion in mode line more
easily. :)

How to make Emacs transparent?
* Section 9 [2017-11-05 Sun 18:31]
I have installed compton and Emacs has transparency now!

Let's change a light theme. Now, It's better. :P

Update packages.

Install hydra package.

Install ace-window package.

Bye! See you next time.
* Section 10 [2017-11-06 Mon 22:46]
In this section, I'll introduce how to install yasnippet.

Let's use it to write C++ programs.

Let's disable scroll bar. Now scroll bar on the right disappears.

Bye! See you next time. :-)
* Section 11 [2017-11-07 Tue 23:23]
Today, I'll introduce how to use abrev.

1. 'C-x a g'
2. 'C-u _n_ C-x a g'
3. 'M-x define-global-abbrev'
4. insert prefix, then 'M-'' and insert abbrev
5. 'M-x expand-region-abbrevs'
6. 'kill-all-abbrevs'

Bye! See you Next time!
* Section 12 [2017-11-08 Wed 21:24]
In this section, I'll introduce how to use macro in Emacs.

1. `<f3>` start macro definition
2. `<f4>` end macro definition or execute last defined macro
3. `C-u _n_ <f4>` execute last defined macro n times
4. `C-x C-k r` exectue last defined macro at the beginning of each
   line of the region

eg. I will delete all of the `;` at the *scratch* buffer

Bye! See you next time!
* Section 13 [2017-11-09 Thu 23:04]
In this section, I'll introduce how to use bookmark and register.

1. bookmark
   1) show bookmarks list: `C-x r l`
   2) create a bookmark: `C-x r m`
2. register
   1. save a piece of text to a register: `C-x r s _c_` _c_ is a
      register name: numbers/characters, case matters.
   2. insert content of a register to buffer: `C-x r i _c_`

There are other uses for register. Maybe I'll introduce that in
future. :)

Bye! See you next time!
* Section 14 [2017-11-11 Sat 00:14]
I was playing games just now. So... It's a little late. :-)

In this section, I'll introduce how to use mark ring and register to
store/jump to specific location.

- use mark ring to jump to history positions.
   1) `C-SPC C-SPC` to push a mark to ring
   2) `C-u C-SPC` to pop a mark and jump to that position
   3) Note: Every buffer has its own mark ring
   4) set variable `set-mark-command-repeat-pop` to customize behavior
      of `C-SPC`. It means that we don't have to type `C-u C-SPC`
      everytime after the first `C-u`

Now, I have set `set-mark-command-repeat-pop` to t. Let's have a
try. It's better!

- use register to save position.
  1) `C-x r SPC _c_` save current position to buffer _c_. _c_ is the
     buffer name which could be numbers, upper/lower characters.
  2) `C-x r j _c_` to jump to the position that the register saved.

It's very useful when you read code or refactor code. :-)

Bye! See you next time!
* Section 15 [2017-11-14 Tue 23:34]
Today, I'll introduce how to use rectangles in Emacs.

region-rectangle is specified by the mark at one corner and point at
the opposite corner.

1. `C-x r M-w` save a region-rectangle
2. `C-x r y` yank the last region-rectangle
3. `C-x r N` insert line numbers at beginning of each line of
   region-rectangle
4. `C-x r c` clean the region-rectangle by replacing the contents with
   spaces
5. `C-x r k` kill the region-rectangle and save it to the last killed
   rectangle
6. `C-x r d` delete the region-rectangle WITHOUT saving it to the last
   killed rectangle
7. `C-x r o` insert spaces to fill the space of region-rectangle
8. `C-x <SPC>` toggle rectangle mode

Bye! See you next time!
* Section 16 [2017-11-15 Wed 00:00]
In this section, I'll introduce how to use org-mode in Emacs.

The current file is a org file. org-mode is enabled.

1. `M-x org-mode` enable org-mode
2. `M-Enter` create another title with the same level
3. `S-right/left` toggle current item with `TODO`, `DONE` and nothing
4. `M-right/left` change item level
5. `M-S-Enter` create a TODO item
6. `S-right` cycle different style of numbered/orderd lists
7. `C-c C-p` jump back to upper item
8. `C-c C-n` jump forward to upper item
9. `C-c C-b` jump back to upper item with the same level
10. `C-c C-f` jump forward to upper item with the same level
11. `C-c C-u` jump to parent item
12. `C-u C-c !` insert timestamp
13. `C-c C-x C-i` clock in
14. `C-c C-x C-o` clock out

Bye! See you next time! :-)
* Section 17 [2017-11-15 Wed 23:32]
In this section, I'll introduce how to search text in Emacs.

1. `C-s` begin incremental search
   - I bind `C-s` to swiper in my configuration, I'll disable it
     now. Restart Emacs
2. type `C-s` again to jump to next match
3. `C-r` begin reverse incremental search
4. type `C-s C-s` or `C-r C-r` to use last used string
5. `<DEL>` jumps backward when searching
6. `<ENTER>` to exit search and stay at the current position
7. `C-g` exit search and return to the point when start search
8. `C-u C-<SPC>` to return to where you were before searching
9. `M-e` to edit search string when searching
10. `C-w` append the next word at point to search string
11. `C-M-w` delete the last character from the search string
12. `C-M-y` append the character after point to the search string
13. `M-s C-e` append the rest of the current to the search string

Bye! Thank you for your time! See you next time! :-)
* Section 18 [2017-11-17 Fri 08:34]
In this section, I'll introduce what you can do in Emacs when you get
bored. :-)

2333 Bye! See you next time!
